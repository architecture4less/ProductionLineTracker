/*
 * AUTH: Jared O'Toole
 * DATE: Thu, Oct 10th, 2019
 * PROJ: ProductionLineTracker
 * FILE: MoviePlayer.java
 *
 * Defines the MoviePlayer class.
 */

package me.jwotoole9141.prodsline.prod;

import me.jwotoole9141.prodsline.item.ItemType;
import me.jwotoole9141.prodsline.item.MonitorType;
import me.jwotoole9141.prodsline.item.MultimediaControl;
import me.jwotoole9141.prodsline.item.Product;
import me.jwotoole9141.prodsline.item.Screen;

/**
 * A representation of a movie player product with multimedia controls.
 *
 * @author Jared O'Toole
 */
public class MoviePlayer extends Product implements MultimediaControl {

  /**
   * The screen used by this movie player.
   */
  private final Screen screen;

  /**
   * The monitor type used by this movie player.
   */
  private final MonitorType monitorType;

  /**
   * Creates a movie player product.
   *
   * <p>
   * A default id of 0 is automatically assigned.
   * </p>
   *
   * @param name        the display name
   * @param manuf       the manufacturer name
   * @param screen      the screen
   * @param monitorType the monitor type
   */
  public MoviePlayer(String name, String manuf, Screen screen, MonitorType monitorType) {

    super(name, ItemType.VISUAL, manuf);
    this.screen = screen;
    this.monitorType = monitorType;
  }

  /**
   * Creates a movie player product with a known id.
   *
   * <p>
   * The id number of a product is automatically generated by the database. Therefore, this
   * constructor should only be used when fetching data from the database.
   * </p>
   *
   * @param id          the product id
   * @param name        the display name
   * @param manuf       the manufacturer name
   * @param screen      the screen
   * @param monitorType the monitor type
   */
  public MoviePlayer(int id, String name, String manuf, Screen screen, MonitorType monitorType) {

    super(id, name, ItemType.VISUAL, manuf);
    this.screen = screen;
    this.monitorType = monitorType;
  }

  /**
   * Gets this movie player's screen.
   *
   * @return the screen
   */
  public Screen getScreen() {

    return screen;
  }

  /**
   * Gets the monitor type of this movie player.
   *
   * @return the monitor type
   */
  public MonitorType getMonitorType() {

    return monitorType;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void play() {

    System.out.println("Playing movie");  // temp
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void stop() {

    System.out.println("Stopping movie");  // temp
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void previous() {

    System.out.println("Previous movie");  // temp
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void next() {

    System.out.println("Next movie");  // temp
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public String toString() {

    return super.toString() + String.format(
        "%nScreen: %s%nMonitorType: %s",
        getScreen(), getMonitorType()
    );
  }
}
