/*
AUTH: Jared O'Toole
DATE: Tue, Oct 8th, 2019
PROJ: ProductionLineTracker
FILE: AudioPlayer.java

Defines the AudioPlayer class.
 */

package me.jwotoole9141.prodsline.items;

/**
 * A representation of an audio player product with multimedia controls.
 *
 * @author Jared O'Toole
 */
public class AudioPlayer extends Product implements MultimediaControl {

  /**
   * The audio formats supported by this audio player, delimited by a '/'.
   */
  private final String audioFormats;

  /**
   * The playlist formats supported by this audio player, delimited by a '/'.
   */
  private final String playlistFormats;

  /**
   * Create an audio player product.
   *
   * <p>
   * A default id of 0 is automatically assigned.
   * </p>
   *
   * @param name            the display name
   * @param manuf           the manufacturer name
   * @param audioFormats    supported audio formats, delimited with a '/'
   * @param playlistFormats supported playlist formats, delimited with a '/'
   */
  public AudioPlayer(String name, String manuf,
      String audioFormats, String playlistFormats) {

    super(name, ItemType.AUDIO, manuf);
    this.audioFormats = audioFormats;
    this.playlistFormats = playlistFormats;
  }

  /**
   * Create an audio player product with a known id.
   *
   * <p>
   * The id number of a product is automatically generated by the database. Therefore, this
   * constructor should only be used when fetching data from the database.
   * </p>
   *
   * @param id              the product id
   * @param name            the display name
   * @param manuf           the manufacturer name
   * @param audioFormats    supported audio formats, delimited with a '/'
   * @param playlistFormats supported playlist formats, delimited with a '/'
   */
  public AudioPlayer(int id, String name, String manuf,
      String audioFormats, String playlistFormats) {

    super(id, name, ItemType.AUDIO, manuf);
    this.audioFormats = audioFormats;
    this.playlistFormats = playlistFormats;
  }

  /**
   * Get the audio formats supported by this audio player.
   *
   * @return the supported audio formats, delimited by a '/'
   */
  public String getAudioFormats() {

    return audioFormats;
  }

  /**
   * Get the playlist formats supported by this audio player.
   *
   * @return the supported playlist formats, delimited by a '/'
   */
  public String getPlaylistFormats() {

    return playlistFormats;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void play() {

    System.out.println("Playing");  // temp
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void stop() {

    System.out.println("Stopping");  // temp
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void previous() {

    System.out.println("Previous");  // temp
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void next() {

    System.out.println("Next");  // temp
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public String toString() {

    return super.toString() + String.format(
        "%nSupported Audio Formats: %s%nSupported Playlist Formats: %s",
        getAudioFormats(), getPlaylistFormats()
    );
  }
}
